# coding: utf-8

"""
    OneLogin API

    OpenAPI Specification for OneLogin  # noqa: E501

    The version of the OpenAPI document: 3.1.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


import unittest
import datetime

import onelogin
from onelogin.models.saml_app import SamlApp  # noqa: E501
from onelogin.rest import ApiException

class TestSamlApp(unittest.TestCase):
    """SamlApp unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test SamlApp
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `SamlApp`
        """
        model = onelogin.models.saml_app.SamlApp()  # noqa: E501
        if include_optional :
            return SamlApp(
                id = 775664, 
                name = 'A Sample App', 
                visible = True, 
                description = '', 
                notes = 'This app is in beta.', 
                icon_url = '/images/missing_connector_icon/square/old_original.png', 
                auth_method = 8, 
                policy_id = 56, 
                allow_assumed_signin = False, 
                tab_id = 196885, 
                connector_id = 108419, 
                created_at = '2018-04-12T21:50:42Z', 
                updated_at = '2019-05-16T19:20:34Z', 
                role_ids = [192513], 
                provisioning = onelogin.models.generic_app_provisioning.generic_app_provisioning(
                    enabled = True, ), 
                parameters = onelogin.models.saml_app_all_of_parameters.saml_app_allOf_parameters(
                    saml_username = onelogin.models.saml_app_all_of_parameters_saml_username.saml_app_allOf_parameters_saml_username(
                        user_attribute_mappings = '', ), ), 
                enforcement_point = onelogin.models.enforcement_point.enforcement_point(
                    require_sitewide_authentication = False, 
                    conditions = '', 
                    session_expiry_fixed = {"value":30,"unit":1}, 
                    session_expiry_inactivity = {"value":30,"unit":1}, 
                    permissions = 'allow', 
                    token = 'b491c647f5e0cff854ad606722ac98342b4b0882', 
                    target = '', 
                    resources = [{"resource_id":809,"conditions":"","is_path_regex":false,"permissions":"allow","require_auth":false,"path":"/"}], 
                    context_root = '/', 
                    use_target_host_header = False, 
                    vhost = '', 
                    landing_page = '', 
                    case_sensitive = False, ), 
                configuration = onelogin.models.configuration_saml.configuration_saml(
                    signature_algorithm = 'SHA-512', 
                    certificate_id = 123456, ), 
                sso = onelogin.models.sso_saml.sso_saml(
                    metadata_url = 'https://app.onelogin.com/saml/metadata/5772393d-2ad3-47d6-a64f-2339b1028291', 
                    acs_url = 'https://sharkbytes.onelogin.com/trust/saml2/http-post/sso/928532', 
                    sls_url = 'https://sharkbytes.onelogin.com/trust/saml2/http-redirect/slo/928532', 
                    issuer = 'https://app.onelogin.com/saml/metadata/5772393d-2ad3-47d6-a64f-2339b1028291', 
                    certificate = onelogin.models.sso_saml_certificate.sso_saml_certificate(
                        id = 170216, 
                        name = 'My Companies SAML Certificate', 
                        value = 'c6d814d032f000d9c03bc79727265', ), )
            )
        else :
            return SamlApp(
        )
        """

    def testSamlApp(self):
        """Test SamlApp"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
