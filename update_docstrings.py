#!/usr/bin/env python3
"""
Script to remove OpenAPI Generator references from all Python files in the onelogin SDK
and replace with a standardized docstring.
"""

import os
import re
import sys
from concurrent.futures import ProcessPoolExecutor

# Define the pattern to match OpenAPI Generator docstrings
OPENAPI_PATTERN = re.compile(
    r'"""[\s\S]*?OpenAPI[\s\S]*?Generated by OpenAPI Generator[\s\S]*?"""',
    re.MULTILINE
)

# The replacement docstring
NEW_DOCSTRING = '''"""
    OneLogin API Python SDK

    Official Python SDK for the OneLogin API
"""'''


def process_file(file_path):
    """Process a single file to replace OpenAPI docstrings."""
    # Skip the script itself
    if os.path.basename(file_path) == os.path.basename(__file__):
        return False

    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()

    # Check if we have a match before modifying the file
    match = OPENAPI_PATTERN.search(content)
    if not match:
        # For debug, print first docstring lines from certain files
        if os.path.basename(file_path) in ['user.py', 'api_client.py', 'configuration.py']:
            print(f"No match in {file_path}. First docstring:")
            if '"""' in content:
                print(content.split('"""')[1][:100] + "...")
        return False

    # Replace OpenAPI docstrings
    new_content = OPENAPI_PATTERN.sub(NEW_DOCSTRING, content)

    # Write back only if modified
    if new_content != content:
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(new_content)
        return True

    return False


def find_py_files(directory):
    """Find all Python files in the directory recursively."""
    for root, _, files in os.walk(directory):
        for file in files:
            if file.endswith('.py'):
                yield os.path.join(root, file)


def main():
    """Main entry point for the script."""
    base_dir = os.path.dirname(os.path.abspath(__file__))
    target_dirs = [
        os.path.join(base_dir, 'onelogin'),
    ]

    modified_count = 0
    total_count = 0

    # Use multiprocessing to speed up file processing
    with ProcessPoolExecutor() as executor:
        for target_dir in target_dirs:
            if not os.path.isdir(target_dir):
                print(f"Directory not found: {target_dir}")
                continue

            print(f"Processing directory: {target_dir}")
            file_paths = list(find_py_files(target_dir))
            total_count += len(file_paths)

            # Process files in parallel
            results = list(executor.map(process_file, file_paths))
            modified_count += sum(1 for result in results if result)

    print(f"Processed {total_count} Python files.")
    print(f"Modified {modified_count} files to remove OpenAPI Generator references.")


if __name__ == '__main__':
    main()