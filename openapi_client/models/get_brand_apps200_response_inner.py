# coding: utf-8

"""
    OneLogin API

    OpenAPI Specification for OneLogin  # noqa: E501

    The version of the OpenAPI document: 3.1.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, StrictBool, StrictInt, StrictStr

class GetBrandApps200ResponseInner(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    id: StrictInt = ...
    updated_at: StrictStr = ...
    name: StrictStr = ...
    connector_id: StrictInt = ...
    auth_method_description: StrictStr = ...
    description: StrictStr = ...
    auth_method: StrictInt = ...
    created_at: StrictStr = ...
    visible: StrictBool = ...
    __properties = ["id", "updated_at", "name", "connector_id", "auth_method_description", "description", "auth_method", "created_at", "visible"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetBrandApps200ResponseInner:
        """Create an instance of GetBrandApps200ResponseInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetBrandApps200ResponseInner:
        """Create an instance of GetBrandApps200ResponseInner from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GetBrandApps200ResponseInner.parse_obj(obj)

        _obj = GetBrandApps200ResponseInner.parse_obj({
            "id": obj.get("id"),
            "updated_at": obj.get("updated_at"),
            "name": obj.get("name"),
            "connector_id": obj.get("connector_id"),
            "auth_method_description": obj.get("auth_method_description"),
            "description": obj.get("description"),
            "auth_method": obj.get("auth_method"),
            "created_at": obj.get("created_at"),
            "visible": obj.get("visible")
        })
        return _obj

