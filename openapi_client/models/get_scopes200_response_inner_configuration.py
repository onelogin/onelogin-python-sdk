# coding: utf-8

"""
    OneLogin API

    OpenAPI Specification for OneLogin  # noqa: E501

    The version of the OpenAPI document: 3.1.1
    Generated by: https://openapi-generator.tech
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictInt, StrictStr

class GetScopes200ResponseInnerConfiguration(BaseModel):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """
    audiences: List[StrictStr] = Field(..., description="List of API endpoints that will be returned in Access Tokens.")
    refresh_token_expiration_minutes: Optional[StrictInt] = Field(None, description="The number of minutes until refresh token expires. There is no maximum expiry limit.")
    resource_identifier: StrictStr = Field(..., description="Unique identifier for the API that the Authorization Server will issue Access Tokens for.")
    access_token_expiration_minutes: Optional[StrictInt] = Field(None, description="The number of minutes until access token expires. There is no maximum expiry limit.")
    __properties = ["audiences", "refresh_token_expiration_minutes", "resource_identifier", "access_token_expiration_minutes"]

    class Config:
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> GetScopes200ResponseInnerConfiguration:
        """Create an instance of GetScopes200ResponseInnerConfiguration from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> GetScopes200ResponseInnerConfiguration:
        """Create an instance of GetScopes200ResponseInnerConfiguration from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return GetScopes200ResponseInnerConfiguration.parse_obj(obj)

        _obj = GetScopes200ResponseInnerConfiguration.parse_obj({
            "audiences": obj.get("audiences"),
            "refresh_token_expiration_minutes": obj.get("refresh_token_expiration_minutes"),
            "resource_identifier": obj.get("resource_identifier"),
            "access_token_expiration_minutes": obj.get("access_token_expiration_minutes")
        })
        return _obj

